// Generated by CoffeeScript 1.4.0
/**
* Service methods related to Scenarios.
*/

Ext.define("AM.service.ScenarioService", {
    inject: ["fieldSearchTypeStore", "fieldTypeStore", "blankTypeStore", 'hasSearchTypeStore', 'settingStore'],
  config: {
      settingStore: null,
      fieldTypeStore: null,
      fieldSearchTypeStore: null,
      blankTypeStore: null,
      hasSearchTypeStore: null
  },
  constructor: function(config) {
    if (config == null) {
      config = {};
    }
    this.initConfig(config);
    return this.callParent(arguments);
  },
  /**
  	* Loads initial reference data: probabilities, revenue impacts, and affected item lists.
  	* @return {Deft.promise.Promise}
  */

  loadInitialData: function() {
      return Deft.Chain.parallel([this.loadFieldTypeStore, this.loadFieldSearchTypeStore, this.loadBlankTypeStore, this.loadHasSearchTypeStore], this);
  },
  /**
  	* Loads reference set of {Phoenix.model.Probability} models.
  	* @return {Deft.promise.Promise}
  */

  loadSettingStore: function () {
    var deferred;
    deferred = Ext.create("Deft.promise.Deferred");
    this.getSettingStore().load({
      callback: function(records, operation, success) {
        if (success) {
          return deferred.resolve();
        } else {
          return deferred.reject("Error loading Setting");
        }
      },
      scope: this
    });
    return deferred.promise;
  },
  /**
  	* Loads reference set of {Phoenix.model.RevenueImpact} models.
  	* @return {Deft.promise.Promise}
  */

loadFieldTypeStore: function () {
    var deferred;
    deferred = Ext.create("Deft.promise.Deferred");
    this.getFieldTypeStore().load({
      callback: function(records, operation, success) {
        if (success) {
          return deferred.resolve();
        } else {
          return deferred.reject("Error loading Field Type Store");
        }
      },
      scope: this
    });
    return deferred.promise;
  },
  /**
  	* Loads reference set of {Phoenix.model.AffectedItem} models.
  	* @return {Deft.promise.Promise}
  */

loadFieldSearchTypeStore: function () {
    var deferred;
    deferred = Ext.create("Deft.promise.Deferred");
    this.getFieldSearchTypeStore().load({
      callback: function(records, operation, success) {
        if (success) {
          return deferred.resolve();
        } else {
          return deferred.reject("Error loading Field Search Type");
        }
      },
      scope: this
    });
    return deferred.promise;
  },
  /**
  	* Loads the set of {Phoenix.model.Scenario} models.
  	* @return {Deft.promise.Promise}
  */

loadBlankTypeStore: function () {
    var deferred;
    deferred = Ext.create("Deft.promise.Deferred");
    this.getBlankTypeStore().load({
      callback: function(records, operation, success) {
        if (success) {
          return deferred.resolve();
        } else {
          return deferred.reject("Error loading Blank Type");
        }
      },
      scope: this
    });
    return deferred.promise;
},

loadHasSearchTypeStore: function () {
    var deferred;
    deferred = Ext.create("Deft.promise.Deferred");
    this.getHasSearchTypeStore().load({
        callback: function (records, operation, success) {
            if (success) {
                return deferred.resolve();
            } else {
                return deferred.reject("Error loading Has Search Type");
            }
        },
        scope: this
    });
    return deferred.promise;
},
  /**
  	* Saves the passed {Phoenix.model.Scenario} and its associated {Phoenix.model.ScenarioItem} models.
  	* @param {Phoenix.model.Scenario} Scenario to save.
  	* @return {Deft.promise.Promise}
  */

  saveScenario: function(scenario) {
    var sequence;
    if (this.isNewScenario(scenario)) {
      this.getScenarioStore().add(scenario);
    }
    scenario.set("dateUpdated", new Date());
    scenario.simulateServerCostBenefitAnalysis();
    sequence = [this.syncScenarioStore];
    if (scenario.scenarioItems().isSyncNeeded()) {
      sequence.push(function() {
        return this.syncScenarioItemsStore(scenario);
      });
    }
    return Deft.Chain.sequence(sequence, this);
  },
  /**
  	* Deletes the passed {Phoenix.model.Scenario} and its associated {Phoenix.model.ScenarioItem} models.
  	* @param {Phoenix.model.Scenario} Scenario to delete.
  	* @return {Deft.promise.Promise}
  */

  deleteScenario: function(scenario) {
    scenario.scenarioItems().load();
    scenario.scenarioItems().removeAll();
    this.getScenarioStore().remove(scenario);
    return Deft.Chain.sequence([
      (function() {
        return this.syncScenarioItemsStore(scenario);
      }), this.syncScenarioStore
    ], this);
  },
  /**
  	* Syncs the {Phoenix.store.ScenarioStore}.
  	* @return {Deft.promise.Promise}
  */

  syncScenarioStore: function() {
    var deferred;
    deferred = Ext.create("Deft.promise.Deferred");
    this.getScenarioStore().sync({
      success: function(batch, options) {
        return deferred.resolve();
      },
      failure: function(batch, options) {
        this.getScenarioStore().rejectChanges();
        return deferred.reject();
      },
      scope: this
    });
    return deferred.promise;
  },
  /**
  	* Syncs the {Phoenix.store.ScenarioItemStore} for the passed {Phoenix.model.Scenario}.
  	* @param {Phoenix.model.Scenario} Scenario whos ScenarioItems will be synced.
  	* @return {Deft.promise.Promise}
  */

  syncScenarioItemsStore: function(scenario) {
    var deferred;
    deferred = Ext.create("Deft.promise.Deferred");
    scenario.updateScenarioItemsAssociation();
    scenario.scenarioItems().sync({
      success: function(batch, options) {
        return deferred.resolve();
      },
      failure: function(batch, options) {
        scenario.scenarioItems().rejectChanges();
        return deferred.reject();
      },
      scope: this
    });
    return deferred.promise;
  },
  /**
  	* Returns true if the {Phoenix.model.Scenario} is not present in the {Phoenix.store.ScenarioStore}.
  	* @param {Phoenix.model.Scenario}
  	* @return {Boolean}
  */

  isNewScenario: function(scenario) {
    return !(this.getScenarioStore().getById(scenario.getId()) != null);
  }
});
